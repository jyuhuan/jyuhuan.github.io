{"includedArchiveIdentifiers":["Solid"],"interfaceLanguages":{"swift":[{"children":[{"title":"Basic data structures","type":"groupMarker"},{"children":[{"title":"Base protocol","type":"groupMarker"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/solid\/queue\/element","title":"Element","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/solid\/queue\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/solid\/queue\/dequeue()","title":"func dequeue() -> Self.Element?","type":"method"},{"path":"\/documentation\/solid\/queue\/enqueue(_:)","title":"func enqueue(Self.Element)","type":"method"}],"path":"\/documentation\/solid\/queue","title":"Queue","type":"protocol"},{"title":"FIFO queues","type":"groupMarker"},{"path":"\/documentation\/solid\/fifoqueue","title":"FIFOQueue","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/solid\/arraybasedfifoqueue\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/solid\/arraybasedfifoqueue\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/solid\/arraybasedfifoqueue\/dequeue()","title":"func dequeue() -> Element?","type":"method"},{"path":"\/documentation\/solid\/arraybasedfifoqueue\/enqueue(_:)","title":"func enqueue(Element)","type":"method"}],"path":"\/documentation\/solid\/arraybasedfifoqueue","title":"ArrayBasedFIFOQueue","type":"struct"},{"title":"Stacks","type":"groupMarker"},{"path":"\/documentation\/solid\/stack","title":"Stack","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/solid\/arraybasedstack\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/solid\/arraybasedstack\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/solid\/arraybasedstack\/dequeue()","title":"func dequeue() -> Element?","type":"method"},{"path":"\/documentation\/solid\/arraybasedstack\/enqueue(_:)","title":"func enqueue(Element)","type":"method"}],"path":"\/documentation\/solid\/arraybasedstack","title":"ArrayBasedStack","type":"struct"},{"title":"Priority queues","type":"groupMarker"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/solid\/priorityqueue\/priority","title":"Priority","type":"associatedtype"}],"path":"\/documentation\/solid\/priorityqueue","title":"PriorityQueue","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/solid\/arraybasedpriorityqueue\/init(prioritizedby:)","title":"init(prioritizedBy: (Element) -> Priority)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/solid\/arraybasedpriorityqueue\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/solid\/arraybasedpriorityqueue\/dequeue()","title":"func dequeue() -> Element?","type":"method"},{"path":"\/documentation\/solid\/arraybasedpriorityqueue\/enqueue(_:)","title":"func enqueue(Element)","type":"method"}],"path":"\/documentation\/solid\/arraybasedpriorityqueue","title":"ArrayBasedPriorityQueue","type":"struct"}],"path":"\/documentation\/solid\/queuetypes","title":"Queues","type":"symbol"},{"children":[{"title":"Abstract definitions","type":"groupMarker"},{"children":[{"title":"Associated types","type":"groupMarker"},{"path":"\/documentation\/solid\/graph\/vertex","title":"Vertex","type":"associatedtype"},{"path":"\/documentation\/solid\/graph\/weight","title":"Weight","type":"associatedtype"},{"title":"Vertex and edge queries","type":"groupMarker"},{"path":"\/documentation\/solid\/graph\/vertices","title":"var vertices: Set<Self.Vertex>","type":"property"},{"path":"\/documentation\/solid\/graph\/outgoingvertices(from:)","title":"func outgoingVertices(from: Self.Vertex) -> Set<Self.Vertex>","type":"method"},{"path":"\/documentation\/solid\/graph\/weight(from:to:)","title":"func weight(from: Self.Vertex, to: Self.Vertex) -> Self.Weight?","type":"method"},{"title":"Lazy transformation","type":"groupMarker"},{"path":"\/documentation\/solid\/graph\/map(_:)","title":"func map<NewWeight>((Self.Weight) -> NewWeight) -> some Graph<Self.Vertex, NewWeight>\n","type":"method"},{"title":"Path searching","type":"groupMarker"},{"path":"\/documentation\/solid\/graph\/path(from:to:searcher:)","title":"func path(from: Self.Vertex, to: Self.Vertex, searcher: any Searcher<Self.Vertex, Self.Vertex, Self.Weight>) -> SearchProblemSolution<Self.Vertex, Self.Vertex, Self.Weight>?","type":"method"},{"path":"\/documentation\/solid\/graph\/path(from:to:searcher:monoid:)","title":"func path(from: Self.Vertex, to: Self.Vertex, searcher: any Searcher<Self.Vertex, Self.Vertex, Self.Weight>, monoid: any Monoid<Self.Weight>) -> SearchProblemSolution<Self.Vertex, Self.Vertex, Self.Weight>?","type":"method"},{"title":"Floyed-Warshall algorithm","type":"groupMarker"},{"path":"\/documentation\/solid\/graph\/shortestpaths()","title":"func shortestPaths() -> FloydWarshallAlgorithmResult<Self.Vertex, Double>","type":"method"},{"path":"\/documentation\/solid\/graph\/transitiveclosure()","title":"func transitiveClosure() -> FloydWarshallAlgorithmResult<Self.Vertex, Bool>","type":"method"},{"path":"\/documentation\/solid\/graph\/runfloydwarshallalgorithm(semiring:)","title":"func runFloydWarshallAlgorithm(semiring: any Semiring<Self.Weight>) -> FloydWarshallAlgorithmResult<Self.Vertex, Self.Weight>","type":"method"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/solid\/floydwarshallalgorithmresult\/path(from:to:)","title":"func path(from: Vertex, to: Vertex) -> [Vertex]?","type":"method"},{"path":"\/documentation\/solid\/floydwarshallalgorithmresult\/weight(from:to:)","title":"func weight(from: Vertex, to: Vertex) -> Weight?","type":"method"}],"path":"\/documentation\/solid\/floydwarshallalgorithmresult","title":"FloydWarshallAlgorithmResult","type":"struct"}],"path":"\/documentation\/solid\/graph","title":"Graph","type":"protocol"},{"title":"Concrete implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/solid\/adjacencylistgraph\/adjacencylist","title":"let adjacencyList: [Vertex : [Vertex : Weight]]","type":"property"},{"path":"\/documentation\/solid\/adjacencylistgraph\/vertices","title":"var vertices: Set<Vertex>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/solid\/adjacencylistgraph\/outgoingvertices(from:)","title":"func outgoingVertices(from: Vertex) -> Set<Vertex>","type":"method"},{"path":"\/documentation\/solid\/adjacencylistgraph\/weight(from:to:)","title":"func weight(from: Vertex, to: Vertex) -> Weight?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/solid\/adjacencylistgraph\/map(_:)","title":"func map<NewWeight>((Self.Weight) -> NewWeight) -> some Graph<Self.Vertex, NewWeight>\n","type":"method"},{"path":"\/documentation\/solid\/adjacencylistgraph\/path(from:to:searcher:)","title":"func path(from: Self.Vertex, to: Self.Vertex, searcher: any Searcher<Self.Vertex, Self.Vertex, Self.Weight>) -> SearchProblemSolution<Self.Vertex, Self.Vertex, Self.Weight>?","type":"method"},{"path":"\/documentation\/solid\/adjacencylistgraph\/path(from:to:searcher:monoid:)","title":"func path(from: Self.Vertex, to: Self.Vertex, searcher: any Searcher<Self.Vertex, Self.Vertex, Self.Weight>, monoid: any Monoid<Self.Weight>) -> SearchProblemSolution<Self.Vertex, Self.Vertex, Self.Weight>?","type":"method"},{"path":"\/documentation\/solid\/adjacencylistgraph\/runfloydwarshallalgorithm(semiring:)","title":"func runFloydWarshallAlgorithm(semiring: any Semiring<Self.Weight>) -> FloydWarshallAlgorithmResult<Self.Vertex, Self.Weight>","type":"method"},{"path":"\/documentation\/solid\/adjacencylistgraph\/shortestpaths()","title":"func shortestPaths() -> FloydWarshallAlgorithmResult<Self.Vertex, Double>","type":"method"},{"path":"\/documentation\/solid\/adjacencylistgraph\/transitiveclosure()","title":"func transitiveClosure() -> FloydWarshallAlgorithmResult<Self.Vertex, Bool>","type":"method"}],"path":"\/documentation\/solid\/adjacencylistgraph\/graph-implementations","title":"Graph Implementations","type":"symbol"}],"path":"\/documentation\/solid\/adjacencylistgraph","title":"AdjacencyListGraph","type":"struct"}],"path":"\/documentation\/solid\/graphtypes","title":"Graphs","type":"symbol"},{"title":"Algebraic structures","type":"groupMarker"},{"children":[{"title":"Magmas","type":"groupMarker"},{"children":[{"title":"Components of a magma","type":"groupMarker"},{"path":"\/documentation\/solid\/magma\/t","title":"T","type":"associatedtype"},{"path":"\/documentation\/solid\/magma\/op(_:_:)","title":"func op(Self.T, Self.T) -> Self.T","type":"method"}],"path":"\/documentation\/solid\/magma","title":"Magma","type":"protocol"},{"children":[{"title":"Components of an additive magma","type":"groupMarker"},{"path":"\/documentation\/solid\/additivemagma\/t","title":"T","type":"associatedtype"},{"path":"\/documentation\/solid\/additivemagma\/add(_:_:)","title":"func add(Self.T, Self.T) -> Self.T","type":"method"},{"title":"Protocol conversion","type":"groupMarker"},{"path":"\/documentation\/solid\/additivemagma\/asmagma()","title":"func asMagma() -> any Magma<Self.T>","type":"method"}],"path":"\/documentation\/solid\/additivemagma","title":"AdditiveMagma","type":"protocol"},{"children":[{"title":"Components of an multiplicative magma","type":"groupMarker"},{"path":"\/documentation\/solid\/multiplicativemagma\/t","title":"T","type":"associatedtype"},{"path":"\/documentation\/solid\/multiplicativemagma\/mul(_:_:)","title":"func mul(Self.T, Self.T) -> Self.T","type":"method"},{"title":"Protocol conversion","type":"groupMarker"},{"path":"\/documentation\/solid\/multiplicativemagma\/asmagma()","title":"func asMagma() -> any Magma<Self.T>","type":"method"}],"path":"\/documentation\/solid\/multiplicativemagma","title":"MultiplicativeMagma","type":"protocol"},{"title":"Semigroups","type":"groupMarker"},{"children":[{"title":"Components of a semigroup","type":"groupMarker"},{"path":"\/documentation\/solid\/magma\/t","title":"T","type":"associatedtype"},{"path":"\/documentation\/solid\/magma\/op(_:_:)","title":"func op(Self.T, Self.T) -> Self.T","type":"method"}],"path":"\/documentation\/solid\/semigroup","title":"Semigroup","type":"protocol"},{"children":[{"title":"Components of an additive semigroup","type":"groupMarker"},{"path":"\/documentation\/solid\/additivemagma\/t","title":"T","type":"associatedtype"},{"path":"\/documentation\/solid\/additivemagma\/add(_:_:)","title":"func add(Self.T, Self.T) -> Self.T","type":"method"},{"title":"Protocol conversion","type":"groupMarker"},{"path":"\/documentation\/solid\/additivesemigroup\/assemigroup()","title":"func asSemigroup() -> some Semigroup<Self.T>\n","type":"method"}],"path":"\/documentation\/solid\/additivesemigroup","title":"AdditiveSemigroup","type":"protocol"},{"children":[{"title":"Components of a multiplicative semigroup","type":"groupMarker"},{"path":"\/documentation\/solid\/multiplicativemagma\/t","title":"T","type":"associatedtype"},{"path":"\/documentation\/solid\/multiplicativemagma\/mul(_:_:)","title":"func mul(Self.T, Self.T) -> Self.T","type":"method"},{"title":"Protocol conversion","type":"groupMarker"},{"path":"\/documentation\/solid\/multiplicativesemigroup\/assemigroup()","title":"func asSemigroup() -> some Semigroup<Self.T>\n","type":"method"}],"path":"\/documentation\/solid\/multiplicativesemigroup","title":"MultiplicativeSemigroup","type":"protocol"},{"title":"Monoids","type":"groupMarker"},{"children":[{"title":"Components of a monoid","type":"groupMarker"},{"path":"\/documentation\/solid\/magma\/t","title":"T","type":"associatedtype"},{"path":"\/documentation\/solid\/magma\/op(_:_:)","title":"func op(Self.T, Self.T) -> Self.T","type":"method"},{"path":"\/documentation\/solid\/hasidentity\/id","title":"var id: Self.T","type":"property"}],"path":"\/documentation\/solid\/monoid","title":"Monoid","type":"protocol"},{"children":[{"title":"Components of an additive monoid","type":"groupMarker"},{"path":"\/documentation\/solid\/magma\/t","title":"T","type":"associatedtype"},{"path":"\/documentation\/solid\/hasadditiveidentity\/zero","title":"var zero: Self.T","type":"property"},{"path":"\/documentation\/solid\/additivemagma\/add(_:_:)","title":"func add(Self.T, Self.T) -> Self.T","type":"method"},{"title":"Protocol conversion","type":"groupMarker"},{"path":"\/documentation\/solid\/additivemonoid\/asmonoid()","title":"func asMonoid() -> some Monoid<Self.T>\n","type":"method"}],"path":"\/documentation\/solid\/additivemonoid","title":"AdditiveMonoid","type":"protocol"},{"children":[{"title":"Components of a multiplicative monoid","type":"groupMarker"},{"path":"\/documentation\/solid\/magma\/t","title":"T","type":"associatedtype"},{"path":"\/documentation\/solid\/hasmultiplicativeidentity\/one","title":"var one: Self.T","type":"property"},{"path":"\/documentation\/solid\/multiplicativemagma\/mul(_:_:)","title":"func mul(Self.T, Self.T) -> Self.T","type":"method"},{"title":"Protocol conversion","type":"groupMarker"},{"path":"\/documentation\/solid\/multiplicativemonoid\/asmonoid()","title":"func asMonoid() -> some Monoid<Self.T>\n","type":"method"}],"path":"\/documentation\/solid\/multiplicativemonoid","title":"MultiplicativeMonoid","type":"protocol"},{"title":"Semiring","type":"groupMarker"},{"children":[{"title":"Components of a semiring","type":"groupMarker"},{"path":"\/documentation\/solid\/magma\/t","title":"T","type":"associatedtype"},{"path":"\/documentation\/solid\/additivemagma\/add(_:_:)","title":"func add(Self.T, Self.T) -> Self.T","type":"method"},{"path":"\/documentation\/solid\/hasadditiveidentity\/zero","title":"var zero: Self.T","type":"property"},{"path":"\/documentation\/solid\/multiplicativemagma\/mul(_:_:)","title":"func mul(Self.T, Self.T) -> Self.T","type":"method"},{"path":"\/documentation\/solid\/hasmultiplicativeidentity\/one","title":"var one: Self.T","type":"property"}],"path":"\/documentation\/solid\/semiring","title":"Semiring","type":"protocol"},{"title":"Identity elements","type":"groupMarker"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/solid\/hasidentity\/t","title":"T","type":"associatedtype"}],"path":"\/documentation\/solid\/hasidentity","title":"HasIdentity","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/solid\/hasadditiveidentity\/t","title":"T","type":"associatedtype"}],"path":"\/documentation\/solid\/hasadditiveidentity","title":"HasAdditiveIdentity","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/solid\/hasmultiplicativeidentity\/t","title":"T","type":"associatedtype"}],"path":"\/documentation\/solid\/hasmultiplicativeidentity","title":"HasMultiplicativeIdentity","type":"protocol"},{"title":"Operation property markers","type":"groupMarker"},{"path":"\/documentation\/solid\/commutative","title":"Commutative","type":"protocol"}],"path":"\/documentation\/solid\/algebraicstructures","title":"Algebraic Structures","type":"symbol"},{"children":[{"title":"Creating a magma","type":"groupMarker"},{"path":"\/documentation\/solid\/newmagma(_:)","title":"func newMagma<T>((T, T) -> T) -> some Magma<T>\n","type":"func"},{"path":"\/documentation\/solid\/newadditivemagma(_:)","title":"func newAdditiveMagma<T>((T, T) -> T) -> some AdditiveMagma<T>\n","type":"func"},{"path":"\/documentation\/solid\/newmultiplicativemagma(_:)","title":"func newMultiplicativeMagma<T>((T, T) -> T) -> some MultiplicativeMagma<T>\n","type":"func"},{"title":"Creating a semigroup","type":"groupMarker"},{"path":"\/documentation\/solid\/newsemigroup(_:)","title":"func newSemigroup((Int, Int) -> Int) -> any Semigroup<Int>","type":"func"},{"path":"\/documentation\/solid\/newadditivesemigroup(_:)","title":"func newAdditiveSemigroup((Int, Int) -> Int) -> any AdditiveSemigroup<Int>","type":"func"},{"path":"\/documentation\/solid\/newmultiplicativesemigroup(_:)","title":"func newMultiplicativeSemigroup((Int, Int) -> Int) -> any MultiplicativeSemigroup<Int>","type":"func"},{"title":"Creating a monoid","type":"groupMarker"},{"path":"\/documentation\/solid\/newmonoid(id:op:)","title":"func newMonoid<T>(id: T, op: (T, T) -> T) -> some Monoid<T>\n","type":"func"},{"path":"\/documentation\/solid\/newadditivemonoid(zero:add:)","title":"func newAdditiveMonoid<T>(zero: T, add: (T, T) -> T) -> some AdditiveMonoid<T>\n","type":"func"},{"path":"\/documentation\/solid\/newmultiplicativemonoid(one:mul:)","title":"func newMultiplicativeMonoid<T>(one: T, mul: (T, T) -> T) -> some MultiplicativeMonoid<T>\n","type":"func"},{"title":"Creating a semiring","type":"groupMarker"},{"path":"\/documentation\/solid\/newsemiring(zero:one:add:mul:)","title":"func newSemiring<T>(zero: T, one: T, add: (T, T) -> T, mul: (T, T) -> T) -> some Semiring<T>\n","type":"func"},{"path":"\/documentation\/solid\/newsemiring(additivemonoid:multiplicativemonoid:)","title":"func newSemiring<T>(additiveMonoid: any Monoid<T>, multiplicativeMonoid: any Monoid<T>) -> some Semiring<T>\n","type":"func"}],"path":"\/documentation\/solid\/creatingalgebraicstructures","title":"Creating Algebraic Structures","type":"symbol"},{"title":"Algorithms","type":"groupMarker"},{"children":[{"title":"Defining a search problem","type":"groupMarker"},{"children":[{"title":"Creating an instance","type":"groupMarker"},{"path":"\/documentation\/solid\/searchproblem\/init(initialstate:isgoal:actions:transition:cost:)","title":"init(initialState: State, isGoal: (State) -> Bool, actions: (State) -> [Action], transition: (State, Action) -> State, cost: (State, Action) -> Cost)","type":"init"},{"path":"\/documentation\/solid\/searchproblem\/init(initialstate:isgoal:actions:transition:cost:monoid:)","title":"init(initialState: State, isGoal: (State) -> Bool, actions: (State) -> [Action], transition: (State, Action) -> State, cost: (State, Action) -> Cost, monoid: any Monoid<Cost>)","type":"init"},{"title":"Components of a search problem","type":"groupMarker"},{"path":"\/documentation\/solid\/searchproblem\/initialstate","title":"let initialState: State","type":"property"},{"path":"\/documentation\/solid\/searchproblem\/isgoal","title":"let isGoal: (State) -> Bool","type":"property"},{"path":"\/documentation\/solid\/searchproblem\/actions","title":"let actions: (State) -> [Action]","type":"property"},{"path":"\/documentation\/solid\/searchproblem\/transition","title":"let transition: (State, Action) -> State","type":"property"},{"path":"\/documentation\/solid\/searchproblem\/cost","title":"let cost: (State, Action) -> Cost","type":"property"},{"path":"\/documentation\/solid\/searchproblem\/monoid","title":"let monoid: any Monoid<Cost>","type":"property"}],"path":"\/documentation\/solid\/searchproblem","title":"SearchProblem","type":"struct"},{"title":"Solving a search problem","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/solid\/breadthfirstsearcher\/init()","title":"init()","type":"init"},{"path":"\/documentation\/solid\/breadthfirstsearcher\/init(fifoqueue:)","title":"init(fifoQueue: @autoclosure () -> any FIFOQueue<SearchNode<State, Action, Cost>>)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/solid\/breadthfirstsearcher\/solve(_:)","title":"func solve(SearchProblem<State, Action, Cost>) -> SearchProblemSolution<State, Action, Cost>?","type":"method"}],"path":"\/documentation\/solid\/breadthfirstsearcher","title":"BreadthFirstSearcher","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/solid\/depthfirstsearcher\/init()","title":"init()","type":"init"},{"path":"\/documentation\/solid\/depthfirstsearcher\/init(stack:)","title":"init(stack: @autoclosure () -> any Stack<SearchNode<State, Action, Cost>>)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/solid\/depthfirstsearcher\/solve(_:)","title":"func solve(SearchProblem<State, Action, Cost>) -> SearchProblemSolution<State, Action, Cost>?","type":"method"}],"path":"\/documentation\/solid\/depthfirstsearcher","title":"DepthFirstSearcher","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/solid\/dijkstrasalgorithmsearcher\/init()","title":"init()","type":"init"},{"path":"\/documentation\/solid\/dijkstrasalgorithmsearcher\/init(priorityqueue:)","title":"init(priorityQueue: @autoclosure () -> any PriorityQueue<SearchNode<State, Action, Cost>, Cost>)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/solid\/dijkstrasalgorithmsearcher\/solve(_:)","title":"func solve(SearchProblem<State, Action, Cost>) -> SearchProblemSolution<State, Action, Cost>?","type":"method"}],"path":"\/documentation\/solid\/dijkstrasalgorithmsearcher","title":"DijkstrasAlgorithmSearcher","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/solid\/astarsearcher\/init(heuristic:)","title":"init(heuristic: (State) -> Cost)","type":"init"},{"path":"\/documentation\/solid\/astarsearcher\/init(heuristic:priorityqueue:)","title":"init(heuristic: (State) -> Cost, priorityQueue: (((State) -> Cost) -> any PriorityQueue<SearchNode<State, Action, Cost>, Cost>)?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/solid\/astarsearcher\/solve(_:)","title":"func solve(SearchProblem<State, Action, Cost>) -> SearchProblemSolution<State, Action, Cost>?","type":"method"}],"path":"\/documentation\/solid\/astarsearcher","title":"AStarSearcher","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/solid\/genericsearcher\/init(fringe:)","title":"init(fringe: @autoclosure () -> any Queue<SearchNode<State, Action, Cost>>)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/solid\/genericsearcher\/solve(_:)","title":"func solve(SearchProblem<State, Action, Cost>) -> SearchProblemSolution<State, Action, Cost>?","type":"method"}],"path":"\/documentation\/solid\/genericsearcher","title":"GenericSearcher","type":"struct"},{"children":[{"title":"Solving a search problem","type":"groupMarker"},{"path":"\/documentation\/solid\/searcher\/solve(_:)","title":"func solve(SearchProblem<Self.State, Self.Action, Self.Cost>) -> SearchProblemSolution<Self.State, Self.Action, Self.Cost>?","type":"method"},{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/solid\/searcher\/action","title":"Action","type":"associatedtype"},{"path":"\/documentation\/solid\/searcher\/cost","title":"Cost","type":"associatedtype"},{"path":"\/documentation\/solid\/searcher\/state","title":"State","type":"associatedtype"}],"path":"\/documentation\/solid\/searcher","title":"Searcher","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/solid\/searchproblemsolution\/actions","title":"let actions: [Action]","type":"property"},{"path":"\/documentation\/solid\/searchproblemsolution\/cost","title":"let cost: Cost","type":"property"},{"path":"\/documentation\/solid\/searchproblemsolution\/states","title":"let states: [State]","type":"property"}],"path":"\/documentation\/solid\/searchproblemsolution","title":"SearchProblemSolution","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/solid\/searchnode\/init(state:actiontaken:accumulatedcost:previous:)","title":"init(state: State, actionTaken: Action?, accumulatedCost: Cost, previous: SearchNode<State, Action, Cost>?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/solid\/searchnode\/accumulatedcost","title":"let accumulatedCost: Cost","type":"property"},{"path":"\/documentation\/solid\/searchnode\/actiontaken","title":"let actionTaken: Action?","type":"property"},{"path":"\/documentation\/solid\/searchnode\/previous","title":"let previous: SearchNode<State, Action, Cost>?","type":"property"},{"path":"\/documentation\/solid\/searchnode\/state","title":"let state: State","type":"property"}],"path":"\/documentation\/solid\/searchnode","title":"SearchNode","type":"class"},{"title":"Graph search","type":"groupMarker"},{"children":[{"title":"Associated types","type":"groupMarker"},{"path":"\/documentation\/solid\/graph\/vertex","title":"Vertex","type":"associatedtype"},{"path":"\/documentation\/solid\/graph\/weight","title":"Weight","type":"associatedtype"},{"title":"Vertex and edge queries","type":"groupMarker"},{"path":"\/documentation\/solid\/graph\/vertices","title":"var vertices: Set<Self.Vertex>","type":"property"},{"path":"\/documentation\/solid\/graph\/outgoingvertices(from:)","title":"func outgoingVertices(from: Self.Vertex) -> Set<Self.Vertex>","type":"method"},{"path":"\/documentation\/solid\/graph\/weight(from:to:)","title":"func weight(from: Self.Vertex, to: Self.Vertex) -> Self.Weight?","type":"method"},{"title":"Lazy transformation","type":"groupMarker"},{"path":"\/documentation\/solid\/graph\/map(_:)","title":"func map<NewWeight>((Self.Weight) -> NewWeight) -> some Graph<Self.Vertex, NewWeight>\n","type":"method"},{"title":"Path searching","type":"groupMarker"},{"path":"\/documentation\/solid\/graph\/path(from:to:searcher:)","title":"func path(from: Self.Vertex, to: Self.Vertex, searcher: any Searcher<Self.Vertex, Self.Vertex, Self.Weight>) -> SearchProblemSolution<Self.Vertex, Self.Vertex, Self.Weight>?","type":"method"},{"path":"\/documentation\/solid\/graph\/path(from:to:searcher:monoid:)","title":"func path(from: Self.Vertex, to: Self.Vertex, searcher: any Searcher<Self.Vertex, Self.Vertex, Self.Weight>, monoid: any Monoid<Self.Weight>) -> SearchProblemSolution<Self.Vertex, Self.Vertex, Self.Weight>?","type":"method"},{"title":"Floyed-Warshall algorithm","type":"groupMarker"},{"path":"\/documentation\/solid\/graph\/shortestpaths()","title":"func shortestPaths() -> FloydWarshallAlgorithmResult<Self.Vertex, Double>","type":"method"},{"path":"\/documentation\/solid\/graph\/transitiveclosure()","title":"func transitiveClosure() -> FloydWarshallAlgorithmResult<Self.Vertex, Bool>","type":"method"},{"path":"\/documentation\/solid\/graph\/runfloydwarshallalgorithm(semiring:)","title":"func runFloydWarshallAlgorithm(semiring: any Semiring<Self.Weight>) -> FloydWarshallAlgorithmResult<Self.Vertex, Self.Weight>","type":"method"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/solid\/floydwarshallalgorithmresult\/path(from:to:)","title":"func path(from: Vertex, to: Vertex) -> [Vertex]?","type":"method"},{"path":"\/documentation\/solid\/floydwarshallalgorithmresult\/weight(from:to:)","title":"func weight(from: Vertex, to: Vertex) -> Weight?","type":"method"}],"path":"\/documentation\/solid\/floydwarshallalgorithmresult","title":"FloydWarshallAlgorithmResult","type":"struct"}],"path":"\/documentation\/solid\/graph","title":"Graph","type":"protocol"},{"path":"\/documentation\/solid\/graph\/path(from:to:searcher:)","title":"func path(from: Self.Vertex, to: Self.Vertex, searcher: any Searcher<Self.Vertex, Self.Vertex, Self.Weight>) -> SearchProblemSolution<Self.Vertex, Self.Vertex, Self.Weight>?","type":"method"},{"path":"\/documentation\/solid\/graph\/path(from:to:searcher:monoid:)","title":"func path(from: Self.Vertex, to: Self.Vertex, searcher: any Searcher<Self.Vertex, Self.Vertex, Self.Weight>, monoid: any Monoid<Self.Weight>) -> SearchProblemSolution<Self.Vertex, Self.Vertex, Self.Weight>?","type":"method"}],"path":"\/documentation\/solid\/searchalgorithms","title":"Search Algorithms","type":"symbol"},{"children":[{"title":"Floyd-Warshall algorithm","type":"groupMarker"},{"path":"\/documentation\/solid\/graph\/shortestpaths()","title":"func shortestPaths() -> FloydWarshallAlgorithmResult<Self.Vertex, Double>","type":"method"},{"path":"\/documentation\/solid\/graph\/transitiveclosure()","title":"func transitiveClosure() -> FloydWarshallAlgorithmResult<Self.Vertex, Bool>","type":"method"},{"path":"\/documentation\/solid\/graph\/runfloydwarshallalgorithm(semiring:)","title":"func runFloydWarshallAlgorithm(semiring: any Semiring<Self.Weight>) -> FloydWarshallAlgorithmResult<Self.Vertex, Self.Weight>","type":"method"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/solid\/floydwarshallalgorithmresult\/path(from:to:)","title":"func path(from: Vertex, to: Vertex) -> [Vertex]?","type":"method"},{"path":"\/documentation\/solid\/floydwarshallalgorithmresult\/weight(from:to:)","title":"func weight(from: Vertex, to: Vertex) -> Weight?","type":"method"}],"path":"\/documentation\/solid\/floydwarshallalgorithmresult","title":"FloydWarshallAlgorithmResult","type":"struct"},{"title":"Graph search","type":"groupMarker"},{"path":"\/documentation\/solid\/graph\/path(from:to:searcher:)","title":"func path(from: Self.Vertex, to: Self.Vertex, searcher: any Searcher<Self.Vertex, Self.Vertex, Self.Weight>) -> SearchProblemSolution<Self.Vertex, Self.Vertex, Self.Weight>?","type":"method"},{"path":"\/documentation\/solid\/graph\/path(from:to:searcher:monoid:)","title":"func path(from: Self.Vertex, to: Self.Vertex, searcher: any Searcher<Self.Vertex, Self.Vertex, Self.Weight>, monoid: any Monoid<Self.Weight>) -> SearchProblemSolution<Self.Vertex, Self.Vertex, Self.Weight>?","type":"method"}],"path":"\/documentation\/solid\/graphalgorithms","title":"Graph Algorithms","type":"symbol"},{"title":"Probablistic data structures","type":"groupMarker"},{"children":[{"children":[{"title":"Creating an instance","type":"groupMarker"},{"path":"\/documentation\/solid\/bloomfilter\/init(cellcount:)","title":"init(cellCount: Int)","type":"init"},{"path":"\/documentation\/solid\/bloomfilter\/init(cellcount:hashfunctions:)","title":"init(cellCount: Int, hashFunctions: [(Element) -> Int])","type":"init"},{"title":"Adding an element","type":"groupMarker"},{"path":"\/documentation\/solid\/bloomfilter\/add(_:)","title":"func add(Element)","type":"method"},{"title":"Checking existence","type":"groupMarker"},{"path":"\/documentation\/solid\/bloomfilter\/mayhave(_:)","title":"func mayHave(Element) -> Bool","type":"method"},{"path":"\/documentation\/solid\/bloomfilter\/doesnothave(_:)","title":"func doesNotHave(Element) -> Bool","type":"method"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/solid\/bloomfilter\/collect(value:for:)","title":"func collect(value: Bool, for: Element)","type":"method"},{"path":"\/documentation\/solid\/bloomfilter\/value(for:)","title":"func value(for: Element) -> Bool","type":"method"}],"path":"\/documentation\/solid\/bloomfilter","title":"BloomFilter","type":"struct"},{"children":[{"title":"Creating an instance","type":"groupMarker"},{"path":"\/documentation\/solid\/countminsketch\/init(cellcount:)","title":"init(cellCount: Int)","type":"init"},{"path":"\/documentation\/solid\/countminsketch\/init(cellcount:hashfunctions:)","title":"init(cellCount: Int, hashFunctions: [(Element) -> Int])","type":"init"},{"title":"Adding counts","type":"groupMarker"},{"path":"\/documentation\/solid\/countminsketch\/count(_:for:)","title":"func count(Int, for: Element)","type":"method"},{"title":"Estimating accumulated counts","type":"groupMarker"},{"path":"\/documentation\/solid\/countminsketch\/estimatedcount(for:)","title":"func estimatedCount(for: Element) -> Int","type":"method"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/solid\/countminsketch\/collect(value:for:)","title":"func collect(value: Int, for: Element)","type":"method"},{"path":"\/documentation\/solid\/countminsketch\/value(for:)","title":"func value(for: Element) -> Int","type":"method"}],"path":"\/documentation\/solid\/countminsketch","title":"CountMinSketch","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/solid\/hashbasedapproximateaccumulator\/init(cellcount:hashfunctions:updatemonoid:querymonoid:)","title":"init(cellCount: Int, hashFunctions: [(Key) -> Int], updateMonoid: any Monoid<Value>, queryMonoid: any Monoid<Value>)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/solid\/hashbasedapproximateaccumulator\/collect(value:for:)","title":"func collect(value: Value, for: Key)","type":"method"},{"path":"\/documentation\/solid\/hashbasedapproximateaccumulator\/value(for:)","title":"func value(for: Key) -> Value","type":"method"}],"path":"\/documentation\/solid\/hashbasedapproximateaccumulator","title":"HashBasedApproximateAccumulator","type":"struct"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/solid\/approximateaccumulator\/key","title":"Key","type":"associatedtype"},{"path":"\/documentation\/solid\/approximateaccumulator\/value","title":"Value","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/solid\/approximateaccumulator\/collect(value:for:)","title":"func collect(value: Self.Value, for: Self.Key)","type":"method"},{"path":"\/documentation\/solid\/approximateaccumulator\/value(for:)","title":"func value(for: Self.Key) -> Self.Value","type":"method"}],"path":"\/documentation\/solid\/approximateaccumulator","title":"ApproximateAccumulator","type":"protocol"}],"path":"\/documentation\/solid\/probablisticdatastructures","title":"Probablistic Data Structures","type":"symbol"}],"path":"\/documentation\/solid","title":"Solid","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}